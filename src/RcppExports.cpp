// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/tiledb.h"
#include <Rcpp.h>

using namespace Rcpp;

// tiledb_version
NumericVector tiledb_version();
RcppExport SEXP _tiledb_tiledb_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(tiledb_version());
    return rcpp_result_gen;
END_RCPP
}
// tiledb_ctx
XPtr<tiledb::Context> tiledb_ctx(Nullable<XPtr<tiledb::Config>> config);
RcppExport SEXP _tiledb_tiledb_ctx(SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Nullable<XPtr<tiledb::Config>> >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(tiledb_ctx(config));
    return rcpp_result_gen;
END_RCPP
}
// tiledb_ctx_config
XPtr<tiledb::Config> tiledb_ctx_config(XPtr<tiledb::Context> ctx);
RcppExport SEXP _tiledb_tiledb_ctx_config(SEXP ctxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    rcpp_result_gen = Rcpp::wrap(tiledb_ctx_config(ctx));
    return rcpp_result_gen;
END_RCPP
}
// tiledb_ctx_is_supported_fs
bool tiledb_ctx_is_supported_fs(XPtr<tiledb::Context> ctx, std::string scheme);
RcppExport SEXP _tiledb_tiledb_ctx_is_supported_fs(SEXP ctxSEXP, SEXP schemeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Context> >::type ctx(ctxSEXP);
    Rcpp::traits::input_parameter< std::string >::type scheme(schemeSEXP);
    rcpp_result_gen = Rcpp::wrap(tiledb_ctx_is_supported_fs(ctx, scheme));
    return rcpp_result_gen;
END_RCPP
}
// tiledb_config_create
XPtr<tiledb::Config> tiledb_config_create(Nullable<CharacterVector> config);
RcppExport SEXP _tiledb_tiledb_config_create(SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Nullable<CharacterVector> >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(tiledb_config_create(config));
    return rcpp_result_gen;
END_RCPP
}
// tiledb_config_vector
CharacterVector tiledb_config_vector(XPtr<tiledb::Config> config);
RcppExport SEXP _tiledb_tiledb_config_vector(SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(tiledb_config_vector(config));
    return rcpp_result_gen;
END_RCPP
}
// tiledb_config_set
XPtr<tiledb::Config> tiledb_config_set(XPtr<tiledb::Config> config, std::string param, std::string value);
RcppExport SEXP _tiledb_tiledb_config_set(SEXP configSEXP, SEXP paramSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    Rcpp::traits::input_parameter< std::string >::type param(paramSEXP);
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(tiledb_config_set(config, param, value));
    return rcpp_result_gen;
END_RCPP
}
// tiledb_config_get
CharacterVector tiledb_config_get(XPtr<tiledb::Config> config, std::string param);
RcppExport SEXP _tiledb_tiledb_config_get(SEXP configSEXP, SEXP paramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    Rcpp::traits::input_parameter< std::string >::type param(paramSEXP);
    rcpp_result_gen = Rcpp::wrap(tiledb_config_get(config, param));
    return rcpp_result_gen;
END_RCPP
}
// tiledb_config_dump
void tiledb_config_dump(XPtr<tiledb::Config> config);
RcppExport SEXP _tiledb_tiledb_config_dump(SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<tiledb::Config> >::type config(configSEXP);
    tiledb_config_dump(config);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tiledb_tiledb_version", (DL_FUNC) &_tiledb_tiledb_version, 0},
    {"_tiledb_tiledb_ctx", (DL_FUNC) &_tiledb_tiledb_ctx, 1},
    {"_tiledb_tiledb_ctx_config", (DL_FUNC) &_tiledb_tiledb_ctx_config, 1},
    {"_tiledb_tiledb_ctx_is_supported_fs", (DL_FUNC) &_tiledb_tiledb_ctx_is_supported_fs, 2},
    {"_tiledb_tiledb_config_create", (DL_FUNC) &_tiledb_tiledb_config_create, 1},
    {"_tiledb_tiledb_config_vector", (DL_FUNC) &_tiledb_tiledb_config_vector, 1},
    {"_tiledb_tiledb_config_set", (DL_FUNC) &_tiledb_tiledb_config_set, 3},
    {"_tiledb_tiledb_config_get", (DL_FUNC) &_tiledb_tiledb_config_get, 2},
    {"_tiledb_tiledb_config_dump", (DL_FUNC) &_tiledb_tiledb_config_dump, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_tiledb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
